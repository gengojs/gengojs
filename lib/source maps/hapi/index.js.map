{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;AAAA,IAAM,GAAG,GAAG,OAAO,CAAC,eAAe,CAAC;IAClC,IAAI,GAAG,OAAO,CAAC,cAAc,CAAC;IAC9B,IAAI,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC;;kBAC1B,CAAC,YAAW;AACzB;;;;;AAAY,GAAC;AAKb,MAAI,MAAM,CAAC;;AAEX,WAAS,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE;AACnC,UAAM,CAAC,GAAG,CAAC,cAAc,EAAE,UAAS,OAAO,EAAE,KAAK,EAAE;AAClD,YAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC;AAClC,WAAK,CAAC,QAAQ,EAAE,CAAC;KAClB,CAAC,CAAC;AACH,UAAM,CAAC,GAAG,CAAC,eAAe,EAAE,UAAS,OAAO,EAAE,KAAK,EAAE;AACnD,YAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC;AAClC,WAAK,CAAC,QAAQ,EAAE,CAAC;KAClB,CAAC,CAAC;AACH,QAAI,EAAE,CAAC;GACR;;AAED,MAAI,KAAK,GAAG,SAAR,KAAK,CAAY,OAAO,EAAgB;QAAd,OAAO,yDAAG,EAAE;;AACxC,UAAM,GAAG,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;AACxC,QAAI,QAAQ,GAAG,IAAI,CAAC;AACpB,YAAQ,CAAC,UAAU,GAAG;AACpB,UAAI,EAAE,GAAG,CAAC,IAAI;KACf,CAAC;AACF,WAAO;AACL,cAAQ,EAAE,QAAQ;AAClB,aAAO,EAAE,OAAO,IAAI,EAAE;KACvB,CAAC;GACH;;;;;;;AAAC,AAOF,OAAK,CAAC,KAAK,GAAG,YAAW;AACvB,WAAO,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;GAC/C;;;;;;AAAC,AAMF,OAAK,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO;;AAAC,AAE5B,SAAO,KAAK,CAAC;CACd,CAAA,EAAG","file":"hapi/index.js","sourcesContent":["const pkg = require('../../package'),\n  core = require('gengojs-core'),\n  pack = require('gengojs-default-pack');\nexport default (function() {\n  'use strict';\n  /**\n   * Global scope\n   * @private\n   */\n  var global;\n\n  function hapi(plugin, options, next) {\n    plugin.ext('onPreHandler', function(request, reply) {\n      global.ship.bind(global)(request);\n      reply.continue();\n    });\n    plugin.ext('onPreResponse', function(request, reply) {\n      global.ship.bind(global)(request);\n      reply.continue();\n    });\n    next();\n  }\n\n  var gengo = function(options, plugins = {}) {\n    global = core(options, plugins, pack());\n    var register = hapi;\n    register.attributes = {\n      name: pkg.name\n    };\n    return {\n      register: register,\n      options: options || {}\n    };\n  };\n  /**\n   * @method clone\n   * @description Returns the API.\n   * @return {Function} The API.\n   * @public\n   */\n  gengo.clone = function() {\n    return global.assign.apply(global, arguments);\n  };\n  /**\n   * version.\n   * @type {String}\n   * @public\n   */\n  gengo.version = pkg.version;\n  // Export\n  return gengo;\n})();"],"sourceRoot":"/source/"}